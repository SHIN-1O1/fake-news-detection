import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
from sk.learn_model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import re
import string

data_fake = pd.read_csv('C:/Users/admin/OneDrive/Documents/Fake.csv', low_memory=False)
data_true = pd.read_csv('C:/Users/admin/OneDrive/Documents/True.csv', low_memory=False)

data_fake.tail()
data_true.tail()
data_fake['class'] = 0
data_true['class'] = 1
data_fake.head(10)
data_true.head(10)
data_fake.shape, data_true.shape
print(data_fake.index)
print(data_true.index)
data_fake.reset_index(drop=True, inplace=True)
data_true.reset_index(drop=True, inplace=True)

data_fake_manual_testing = data_fake.tail(10)
data_true_manual_testing = data_true.tail(10)

data_fake = data_fake.iloc[:-10]
data_true = data_true.iloc[:-10]
data_fake.shape, data_true.shape
data_fake_manual_testing['class'] = 0
data_true_manual_testing['class'] = 1
data_fake_manual_testing.head(10)
data_true_manual_testing.head(10)
data_merge = pd.concat([data_fake,data_true],axis = 0)
data_merge.head(10)

data_merge.shape
data_merge.columns
data = data_merge.drop(['title','subject', 'date', 'Unnamed: 4', 'Unnamed: 5','Unnamed: 6', 'Unnamed: 7', 'Unnamed: 8', 'Unnamed: 9', 'Unnamed: 10'], axis = 1)
data.isnull().sum()
data = data.sample(frac = 1)
data.head()
data.reset_index(inplace = True)
data.drop(['index'], axis = 1, inplace = True)
data.columns
data.head()

import re
import string

def wordopt(text):
    if not isinstance(text, str): 
        return ""  

    text = text.lower()
    text = re.sub(r'\[.*?\]', '', text) 
    text = re.sub(r"\\W", " ", text)    
    text = re.sub(r'https?://\S+|www\.\S+', '', text)
    text = re.sub(r'<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub(r'\w*\d\w*', '', text)  
    return text
data['text'] = data['text'].apply(wordopt)
x = data['text']
y = data['class']
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25)
from sklearn.feature_extraction.text import TfidfVectorizer

vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)
from sklearn.linear_model import LogisticRegression

LR = LogisticRegression()
LR.fit(xv_train, y_train)
LR.score(xv_test, y_test)

from sklearn.metrics import classification_report
pred_lr = LR.predict(xv_test)
print(classification_report(y_test, pred_lr))

from sklearn.tree import DecisionTreeClassifier

DT = DecisionTreeClassifier()
DT.fit(xv_train, y_train)  
pred_dt = DT.predict(xv_test)
DT.score(xv_test, y_test)
print(classification_report(y_test, pred_dt))
from sklearn.ensemble import GradientBoostingClassifier

GB = GradientBoostingClassifier(random_state = 0)
GB.fit(xv_train, y_train)
pred_gb = GB.predict(xv_test)
GB.score(xv_test, y_test)
print(classification_report(y_test, pred_gb))

from sklearn.ensemble import RandomForestClassifier

RF = RandomForestClassifier(random_state = 0)
RF.fit(xv_train, y_train)
pred_rf = RF.predict(xv_test)
RF.score(xv_test, y_test)

def output_label(n):
    if n == 0:
        return "Fake News"
    elif n == 1:
        return "Not a Fake News"

def manual_testing(news):
    testing_news = {"text": [news]}  
    new_def_test = pd.DataFrame(testing_news)
    new_def_test["text"] = new_def_test["text"].apply(wordopt)
    new_xv_test = vectorization.transform(new_def_test["text"])
    
    # Predictions
    pred_LR = LR.predict(new_xv_test)
    pred_DT = DT.predict(new_xv_test)
    pred_GB = GB.predict(new_xv_test)
    pred_RF = RF.predict(new_xv_test)

    return print("\n\nLR Prediction: {} \nDT Prediction: {} \nGBC Prediction: {} \nRF Prediction: {}".format(
        output_label(pred_LR[0]), 
        output_label(pred_DT[0]), 
        output_label(pred_GB[0]), 
        output_label(pred_RF[0])
    ))

news = input()
manual_testing(news)
